#include "std_lib_facilities.h"

template <typename C> //template passes data type as a parameter so that we don’t need to write the same code for different data type

void print_content(const C& c)
{
    for (auto& a : c) //auto is used to select each value of a
    {
        cout << a << " ";
    }
    cout << endl;
}

template <typename C> //template passes data type as a parameter so that we don’t need to write the same code for different data type

void print_content(const C& c, int n)
{
    cout << n << " : ";
    for (auto& a : c) //auto is used to select each value of a
    {
        cout << a + n << ' ';
    }
    cout << endl;
}

template<typename Iter1, typename Iter2>
void my_copy(Iter1 f1, Iter1 e1, Iter2 f2) // to creat a copy and inputs it in another e.g(to input the values of an array and inputs it in a vector)
{
    for (Iter1 p = f1; p != e1; ++p)
    {
        *f2++ = *p;
    }
}
int main()
{
    constexpr int size = 10;
    array<int, size> arr = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    vector<int> vec = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    list<int> lis = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
    array<int, size> arr_copy = arr;
    vector<int> vec_copy = vec;
    list<int> lis_copy = lis;


    cout << "array: ";
    print_content(arr);
    cout << "array+";
    print_content(arr, 2);
    cout << endl;

    cout << "vector: ";
    print_content(vec);
    cout << "vector+";
    print_content(vec, 2);
    cout << endl;

    cout << "list: ";
    print_content(lis);
    cout << "list+";
    print_content(lis, 2);
    cout << endl;

    cout << "my_copy: ";
    my_copy(arr.begin(),arr.end(),vec_copy.begin());
    print_content(vec_copy);
    cout << endl;

    array<int, size>::iterator ac;
    ac = find(arr_copy.begin(), arr_copy.end(), 9);
    if (ac != arr_copy.end())
    {
        cout << "array found at: " << distance(arr_copy.begin(), ac) << '\n'<< endl;
    }
    else
    {
        cout << "array not found"<< endl;
    }

    vector<int>::iterator vc;
    vc = find(vec_copy.begin(), vec_copy.end(), 3);
    if (vc != vec_copy.end())
    {
        cout << "vector found at: " << distance(vec_copy.begin(), vc) << '\n'<< endl;
    }
    else
    {
        cout << "vector not found"<< endl;
    }

    list<int>::iterator lc;
    lc = find(lis_copy.begin(), lis_copy.end(), 27);
    if (lc != lis_copy.end())
    {
        cout << "list found at: " << distance(lis_copy.begin(), lc) << '\n'<< endl;
    }
    else
    {
        cout << "list not found"<< endl;
    }

}
